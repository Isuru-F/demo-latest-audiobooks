name: AMP Review Bot

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  amp-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Extract repo name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
        
      - name: Get PR information
        uses: octokit/request-action@v2.x
        id: get-pr-info
        with:
          route: GET /repos/{owner}/{repo}/pulls/{pull_number}
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-name.outputs.REPO_NAME }}
          pull_number: ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.AMP_REVIEW_GH_TOKEN }}

      - name: Install dependencies
        run: npm install -g @sourcegraph/amp

      - name: Get PR files
        uses: octokit/request-action@v2.x
        id: get-pr-files
        with:
          route: GET /repos/{owner}/{repo}/pulls/{pull_number}/files
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-name.outputs.REPO_NAME }}
          pull_number: ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.AMP_REVIEW_GH_TOKEN }}

      - name: Set basic PR details
        id: pr-details
        run: |
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Run Amp review
        env:
          AMP_API_KEY: ${{ secrets.AMP_API_KEY }}
        run: |
          # Create simple prompt
          PROMPT="Review PR #$PR_NUMBER: $PR_TITLE on $PR_URL. Provide a thorough code review looking for issues and possible improvements."
          
          # Run AMP with the prompt
          amp "$PROMPT" > amp_review.txt
          
      - name: Post comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.AMP_REVIEW_GH_TOKEN }}
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('amp_review.txt', 'utf8');
            
            const commentBody = `## AMP Bot Review
            
            ${reviewContent}`;
            
            // Look for existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes('## AMP Bot Review')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }